# Maintainer: Thach Nguyen (github.com/thachnn)

_realname=nginx
groups=("${MINGW_PACKAGE_PREFIX}-$_realname-modules")
_mods=('http-xslt-filter' libxslt '' 'Nginx filter module that transforms XML responses using XSLT stylesheets'
       'http-geoip' geoip '' 'Nginx module that creates variables depending on the client IP address'
       'stream-geoip' geoip '' 'Nginx module that creates variables with values depending on the client IP address'
       'http-image-filter' libgd '' 'Nginx filter module that transforms images in JPEG, GIF, PNG, and WebP formats'
       'http-perl' perl '' 'Nginx module to implement location/variable handlers in Perl and insert Perl calls into SSI'
       #
       'http-echo' '' 'git+https://github.com/openresty/echo-nginx-module#tag=v0.63'
         'Nginx third-party module (v0.63) for bringing the power of "echo", "sleep", "time" and more to Nginx config file'
       'http-headers-more' '' 'git+https://github.com/openresty/headers-more-nginx-module#tag=v0.34'
         'Nginx third-party module (v0.34) to set, add, and clear arbitrary output headers'
       'http-geoip2' libmaxminddb 'git+https://github.com/leev/ngx_http_geoip2_module#tag=3.4'
         'Nginx third-party module (v3.4) that creates variables with values from GeoIP2 DB based on the client IP'
       'stream-geoip2' libmaxminddb 2 'Nginx third-party module (v3.4) that creates variables from GeoIP2 DB based on the client IP'
       'http-dav-ext' libxml2 'git+https://github.com/arut/nginx-dav-ext-module#tag=v3.0.0'
         'Nginx third-party module (v3.0.0) that supports WebDAV PROPFIND,OPTIONS,LOCK,UNLOCK'
       #
       'devel-kit' '' 'git+https://github.com/vision5/ngx_devel_kit#tag=v0.3.2?lic=BSD-3-Clause'
         'Nginx third-party module (v0.3.2) that adds additional generic tools for Nginx modules development'
       'http-array-var' "$_realname-mod-devel-kit" 'git+https://github.com/openresty/array-var-nginx-module#tag=v0.06'
         'Nginx third-party module (v0.06) that supports array-typed variables for Nginx config file'
       'http-upload-progress' '' 'git+https://github.com/masterzen/nginx-upload-progress-module#tag=v0.9.2'
         'Nginx third-party module (v0.9.2) implementing an upload progress system, that monitors RFC1867 POST uploads'
       rtmp '' 'git+https://github.com/arut/nginx-rtmp-module#tag=v1.2.2'
         'Nginx third-party module (v1.2.2) that provides Media Streaming Server based on Nginx')
_mcols=4
_mlength=${#_mods[@]}

pkgname=()
for (( _i=0; _i<$_mlength; _i+=$_mcols )); do
  pkgname+=("$MINGW_PACKAGE_PREFIX-$_realname-mod-${_mods[$_i]}")
done
pkgver=1.23.3
_tag="release-$pkgver"
pkgrel=1
arch=(any)
mingw_arch=(mingw32 mingw64 ucrt64 clang64 clang32 clangarm64)
url='https://nginx.org'
license=('spdx:BSD-2-Clause')

depends=("$MINGW_PACKAGE_PREFIX-$_realname")
for (( _i=1; _i<$_mlength; _i+=$_mcols )); do
  if [[ -n "${_mods[$_i]}" ]]; then
    for _x in ${_mods[$_i]}; do depends+=("$MINGW_PACKAGE_PREFIX-$_x"); done
  fi
done
makedepends=("$MINGW_PACKAGE_PREFIX-gcc")

source=("https://github.com/nginx/$_realname/archive/$_tag.tar.gz"
        '003-fix-external-mods.patch'
        '001-fix-build-flags.patch'
        '002-correct-cc-headers.patch')
sha256sums=('3f9961f581763a248da5cf6b92b533699f9037f484b57c289c6ee4cf3e57c97a'
            '56e5e560df3deafd75f363ed006bd97a621a4a1b90eec1861da244a53f472db6'
            '588ad0fb6371714d3bacdeacda64faa004c23c715886e8fc17d9b5ec3d929f0a'
            'e43bfac51d3542ef027a9a05ad748ae0c5fb51ab173b2dd777f998394f7ec2ae')
for (( _i=2; _i<$_mlength; _i+=$_mcols )); do
  if [[ "${_mods[$_i]}" == *'://'* ]]; then
    source+=("${_mods[$(( $_i-2 ))]}::${_mods[$_i]%?lic=*}"); sha256sums+=('SKIP')
  fi
done

# Helper macros to help make tasks easier
apply_patch_with_msg() {
  for _patch in "$@"; do
    msg2 "Applying $_patch"
    patch -Ntlp1 -i "$srcdir/$_patch" || true
  done
}

prepare() {
  cd "$srcdir"
  apply_patch_with_msg \
    '003-fix-external-mods.patch'

  cd "$_realname-$_tag"
  apply_patch_with_msg \
    '001-fix-build-flags.patch' \
    '002-correct-cc-headers.patch'
}

build() {
  cd "$srcdir/$_realname-$_tag"

  _extra_config=()
  for (( _i=0; _i<$_mlength; _i+=$_mcols )); do
    case "${_mods[$(( $_i+2 ))]}" in
      *'://'*)
        _extra_config+=("--add-dynamic-module=../${_mods[$_i]}") ;;
      '')
        _x="${_mods[$_i]/%-xslt-filter/-xslt}"
        _extra_config+=("--with-${_x//-/_}_module=dynamic") ;;
    esac
  done

  NGX_MACHINE="$CARCH" CFLAGS= \
  auto/configure \
    --crossbuild=win32 \
    --with-cc=gcc \
    --with-cc-opt="$CFLAGS -DFD_SETSIZE=1024 -s -fno-strict-aliasing" \
    --with-ld-opt="$LDFLAGS -Wl,--gc-sections,--build-id=none" \
    --with-{http_v2_module,mail,stream} \
    "${_extra_config[@]}"

  make modules || make modules
}

_package() {
  local i=$1
  pkgbase="mingw-w64-$_realname-mod-${_mods[$i]}"
  pkgdesc="${_mods[$(( $i+3 ))]} (mingw-w64)"

  _x="${_mods[$(( $i+2 ))]}"; [[ ! "$_x" =~ ^[0-9]+$ ]] || _x="${_mods[$(( $i-$_x ))]}"
  if [[ -n "$_x" ]]; then
    _x="${_x#[a-z]*+}"; url="${_x%#*}"
    [[ "$_x" != *'?lic='* ]] || license=("${_x#*?lic=}")
  fi

  depends=("$MINGW_PACKAGE_PREFIX-$_realname")
  if [[ -n "${_mods[$(( $i+1 ))]}" ]]; then
    for _x in ${_mods[$(( $i+1 ))]}; do depends+=("$MINGW_PACKAGE_PREFIX-$_x"); done
  fi

  cd "$srcdir/$_realname-$_tag"
  _x="ngx_${_mods[$i]//-/_}"; _x="${_x/%_progress/progress}"; _x="${_x/#ngx_devel*/ndk}"

  install -Dm644 -t "$pkgdir$MINGW_PREFIX/lib/$_realname/modules/" "objs/$_x"_*module.so
  install -Dm644 <(ls -1 "objs/$_x"_*module.so | sed 's/^objs\(.*\)/load_module  modules\1;/') \
    "$pkgdir$MINGW_PREFIX/etc/$_realname/modules/${_mods[$i]}.conf"

  case "${_mods[$i]}" in
    http-perl)
      make -C objs/src/http/modules/perl DESTDIR="$pkgdir" pure_install
      rm -f "$pkgdir$MINGW_PREFIX/lib"/perl5/*/*/auto/nginx/.packlist ;;
  esac
}

for (( _i=0; _i<$_mlength; _i+=$_mcols )); do
  eval "package_$MINGW_PACKAGE_PREFIX-$_realname-mod-${_mods[$_i]}() { _package $_i; }"
done
