# Maintainer: Alexey Pavlov <Alexpux@gmail.com>
# Contributor: Thach Nguyen (github.com/thachnn)

_with_runtime="yes"
_with_docs="no"

_realname=openssl
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
_ver=3.1.0
pkgver=$_ver
[ "$_with_runtime" = "only" ] && pkgver="$pkgver.runtime" || \
[ "$_with_runtime" = "yes" ] || pkgver="$pkgver.devel"
pkgrel=1
pkgdesc="The Open Source toolkit for Secure Sockets Layer and Transport Layer Security (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32' 'clangarm64')
url='https://www.openssl.org/'
license=("spdx:Apache-2.0")
optdepends=("${MINGW_PACKAGE_PREFIX}-ca-certificates")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-autotools")
# Use mingw cflags instead of configured ones
options=('strip' '!buildflags' '!debug')
source=("https://www.openssl.org/source/${_realname}-${_ver}.tar.gz"{,.asc}
        '001-support-aarch64.patch'
        '002-relocation.patch'
        'https://github.com/msys2/MINGW-packages/raw/master/mingw-w64-pathtools/pathtools.c'
        'https://github.com/msys2/MINGW-packages/raw/master/mingw-w64-pathtools/pathtools.h')
sha256sums=('aaa925ad9828745c4cad9d9efeb273deca820f2cdcf2c3ac7d7c1212b7c497b4'
            'SKIP'
            '0a259f1a9ee83a71292f27e0140cbcd6aafef2a10d7e4ee67cea78b12ebf4378'
            '5628dd39ab0d3ce4afbb5207bab5d22766abc86a8875b48b6d4d3efd68550e68'
            '08209cbf1633fa92eae7e5d28f95f8df9d6184cc20fa878c99aec4709bb257fd'
            '965d3921ec4fdeec94a2718bc2c85ce5e1a00ea0e499330a554074a7ae15dfc6')

# https://www.openssl.org/community/otc.html
validpgpkeys=(
  '8657ABB260F056B1E5190839D9C4D26D0E604491' # Matt Caswell <matt@openssl.org>
  '7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C' # Richard Levitte <richard@levitte.org>
  'A21FAB74B0088AA361152586B8EF1A6BA9DA2D5C' # Tomáš Mráz <tm@t8m.info>
  'B7C1C14360F353A36862E4D5231C84CDDCC69C45' # Paul Dale <pauli@openssl.org>
)

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}
# =========================================== #

prepare() {
  cd ${srcdir}/${_realname}-${_ver}

  apply_patch_with_msg \
     001-support-aarch64.patch \
     002-relocation.patch

  cp -fHv "${srcdir}"/pathtools.c crypto/
  cp -fHv "${srcdir}"/pathtools.h ./
}

build() {
  mkdir -p "${srcdir}/build-${MSYSTEM}" && cd "${srcdir}/build-${MSYSTEM}"

  if [ "$_with_runtime" = "only" ]; then
    sed -i 's/ install_dev\b//' "../${_realname}-${_ver}/Configurations/unix-Makefile.tmpl"
  elif [ "$_with_runtime" != "yes" ]; then
    sed -i -e 's/nodep build_programs_nodep/nodep/;s/ install_runtime\b//' \
       "../${_realname}-${_ver}/Configurations/unix-Makefile.tmpl"
  fi

  case "${CARCH}" in
    i?86)
      _mingw=mingw
      ;;
    x86_64)
      _mingw=mingw64
      ;;
    aarch64)
      _mingw=mingwarm64
      ;;
  esac

  CFLAGS="${CFLAGS/-O2 /}" \
  MSYS2_ARG_CONV_EXCL="--prefix=" \
  ../"${_realname}-${_ver}"/Configure \
    --prefix="${MINGW_PREFIX}" \
    --libdir=lib \
    --openssldir=etc/ssl \
    ${_mingw} \
    shared \
    zlib-dynamic \
    enable-camellia \
    enable-capieng \
    enable-idea \
    enable-mdc2 \
    enable-rc5  \
    enable-rfc3779 \
    -DOPENSSLBIN=\"\\\"${MINGW_PREFIX}/bin\\\"\"

  MSYS2_ARG_CONV_EXCL="-DENGINESDIR=;-DMODULESDIR=;-DOPENSSLDIR=;-DOPENSSLBIN=" \
  make build_sw
}

check() {
  cd "${srcdir}/build-${MSYSTEM}"

  make VERBOSE=1 test
}

package() {
  cd "${srcdir}/build-${MSYSTEM}"

  _targets=install_sw
  [ "$_with_runtime" != "yes" -a "$_with_runtime" != "only" ] || _targets="$_targets install_ssldirs"
  [ "$_with_docs" != "yes" ] || _targets="$_targets install_docs"

  make DESTDIR="${pkgdir}" $_targets

  install -Dm644 "../${_realname}-${_ver}/LICENSE.txt" "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE"
}
